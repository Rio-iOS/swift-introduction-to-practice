import Foundation

print("1.1 言語の特徴")
/*
 静的型付き言語
 コンパイル時など実行前の段階で、変数や定数の型（type）の情報を
 決定するプログラミング言語
 - 静的型付き言語では、誤った型の代入などがコンパイルエラーとして検出
    - メリット
        1. プログラムの誤りに起因する実行時エラーの一部を未然に防げる
                - コンパイルエラー：実行前に判明するエラー
                - コンパイルエラーがある限りプログラムは実行できない
                - 実行時エラー：実行中に判明するエラー
                - 実行時エラーが発生すると、プログラムは強制終了する
        2. より安全性が高く、大規模なプログラム開発に向いている
 
 Swift：静的型付き言語
 - 全ての変数と定数の「型」はコンパイル時に決定
 - 一度決定された変数や定数の型は「変更できない」
 - 他の型の値を代入することはできない
 
 Swift：型安全性（type safety）
 - 型の誤りをコンパイル時に検出するため、実行時には予期せぬ不正な動作が起こらないという安全性が保証される
 
 Swift：nilの許容性をコントロール可能
 - nil：値が存在しないことを示すもの
    - 多くのプログラミング言語で、変数や定数の初期化が済んでいない状態や、参照先が存在しない状態を表す値として活用
    - 初期化されていない値や参照先が存在しない値へのアクセスによる実行時エラーを招いてしまうという問題があった
 
 - Swiftでは、基本的に変数や定数にnilを代入できない仕様になっている
 - nilを許容する特別な型の変数や定数へのみ、nilを代入可能
 - Optional<Wrapped>：Swiftでnilを許容する代表的な型
 
 Swift：型推論による関係つな記述
 - Swiftには、「型推論」という仕組みが導入されているため、代入する値などからコンパイラが型を推測できる場合は、宣言時にその型を明示する必要がない
 
 Swift：ジェネリクスによる汎用的な記述
 - ジェネリクス：特定の型に制限されない汎用的なプログラムを記述するための機能
 -  ジェネリクスを使用したプログラミングでは、引数の型は抽象的なものとなっており、さまざまな型の引数を渡せる
- ジェネリクスはプログラムを汎用的にするが、型の安全性が失われるわけではない
 
 Swift：Objective-Cと連携可能
 macOS向けのフレームワーク：Cocoa, iOS, tvOS
 watchOS向けのフレームワーク：Cocoa Touch
 Cocoaの大部分はObjective-Cで書かれている
 
 Swift：ツールチェインのインストール
 - ツールチェイン：コンパイラやデバッガなどの開発に必要なツールを一通りまとめたもの
 
 Swift：ライブラリ
 - Swiftは、汎用的な機能を持ったプログラムを持ったプログラムをライブラリ群として提供
 - 標準ライブラリとコアライブラいに分類
 
 Swfit：標準ライブラリ（言語の一部となるライブラリ）
 - 標準ライブラリ：言語の一部として基本的な機能を提供するライブラリ
    - 数値、文字列、配列、辞書などのデータを表す型が提供されている
 - 標準ライブラリに含まれているものは常に利用可能であり、インポートなどの手続きは不要
 
 Swift：コアライブラリ（高機能な汎用ライブラリ）
 - コアライブラリ：非同期処理や通信、ファイル操作といったより高いレベルより高いレベルの機能を提供するもの
 - コアライブラリとしては次の3つが提供
    - Foundation：多くのアプリケーションに必要となる機能を提供
    - libdispatch：マルチコアハードウェア上の並列処理を抽象化する
    - XCTest：ユニットテストためのライブラリ
 
 Swift：Swift Package Manager（パッケージ管理ツール）
 - Swift Package Manager：Swiftのパッケージ管理ツール
 - パッケージ：ソースコード + マニフェストファイル
 - Swift Package Managerは、これらをもとにプログラムのビルドを行う
 - マニフェストファイル：パッケージ名や依存パッケージなどを記述するファイル
    - マニフェストファイルは記述された外部のパッケージは、ビルド時にダウンロードされプログラムから利用可能になる
 - ビルドの成果物：主にライブラリと実行ファイルの2種類がある
 - ライブラリ：他のプログラムから利用可能なプログラム
 - 実行ファイル：単体で実行可能なプログラム
 
 Swift：LLDB（デバッグツール）
 - デバッガ：デバッグを支援するためのツール
    - プログラムのインタラクティブな実行や、変数やコールスタックのダンプなどの機能がある
 
 Swfit：命名規則
 - 名前に使用可能な文字
    - 変数や定数の名前は、英語の名詞として読めるものが推奨
 
 - 単語の区切り方
    - camelCase：小文字のアルファベットをはじまりとして、単語ごとに大文字にするロワーキャメルケースを使用する
    - 型は、CamelCaseのように大文字のアルファベットをはじまりとするアッパーキャメルケース（upper camel case）を使用
 
 - 単語の選び方
    - あいまいさの解消に必要な単語は全て含める
        - bad：findUser(_:)関数は、どのようにユーザー検索するか曖昧
        - good：findUser(byID:)関数は、ユーザーIDで検索することが明確

    - 一般的でない単語の使用は避ける
    
    - 略語を避ける
        - bad：stmtは、statementの略語だと解釈する必要がある
        - good：statementは、そのまま理解できる
 */

print("ジェネリクスの例")
let intX = 123
let intY = 456
let intZ = max(intX, intY)
print(intZ)

let stringX = "abc"
let stringY = "def"
let stringZ = max(stringX, stringY)
print(stringZ)
